3.1
write a java method repeatedly selects and removes a random entry from an array until the array holds no more entries
자바에서 배열의 요소를 무작위로 선택하여 제거하는 메서드를 작성하는 것은 ArrayList 를 사용하려 효과적으로 처리 가능
public class RandomRemover {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        Random random = new Random();
        while(!list.isEmpty()) {
            int index = random.nextInt(list.size());
            System.out.println("Removing element at index " + index + ": " + list.remove(index));
        }
    }
}
3.4
단일 연결 리스트에서 두 번째로 마지막 노드를 찾는 알고리즘
public E secondToLast(){
    if(size<2){
        return null;
    }
    Node<E> current = head;
    Node<E> previous = null;
    while(current.getNext() != null){
        previous = current;
        current = current.getNext();
    }
    return previous.getElement();
}
1. 두 개의 포인터를 사용. 하나는 리스트 탐색용 하나는 탐색 바로 이전 노드
2. 리스트를 current 포인터를 리스트의 시작부터 끝까지 이동 시키고 previous 는 한상 뒤를 따르게 함
3. current가 마지막 노드를 가리키면 previous는 두 번째로 마지막 노드를 가리킨다
getNext() : 현재 노드가 가리키는 다음 노드의 참조를 반환
getElement() : 노드에 저장된 데이터를 반환

3.7
단일 연결 리스트에서 size 인스턴스 변수를 사용하지 않고 리스트의 크기를 계산하는 size()
메서드를 구현하는 방법
리스트의 시작부터 끝까지 모든 노드를 순회하면서 노드의 개수를 세는 방식
public int size() {
    Node<E> current = head; // 리스트의 시작 지점
    int count = 0; // 노드의 개수를 세기 위한 카운터
    while (current != null) { // 현재 노드가 null이 아닐 때까지 반복
        count++; // 노드를 하나 세고
        current = current.getNext(); // 다음 노드로 이동
    }
    return count; // 계산된 노드의 개수 반환
}

3.8
원형 연결 리스트에서 size 인스턴스 변수를 사용하지 않고 리스트의 크기를 계산하는 size()
메서드를 구현하는 방법
리스트를 순회하면서 노드의 개수를 세는 방식
public int size() {
    if (tail == null) return 0; // 리스트가 비어있으면 0 반환
    int count = 1; // `tail`이 존재하므로 최소 하나는 있음
    Node<E> current = tail.getNext(); // 리스트의 헤드부터 시작
    while (current != tail) { // `tail`에 다시 도달할 때까지 순회
        count++;
        current = current.getNext();
    }
    return count; // 계산된 노드의 개수 반환
}

3.10
rotate() 메서드는 단일연결 리스트에서 첫 번째 노드를 제거하고 이를 리스트의 마지막에 추가하는 기능
이 과정에서 새로운 노드를 생성하지 않고 기존 노드를 재사용

public void rotate() {
    if (head != null && head != tail) { // 리스트에 노드가 2개 이상 있는 경우에만 회전
        Node<E> firstNode = head; // 첫 번째 노드 저장
        head = head.getNext(); // head를 두 번째 노드로 이동
        tail.setNext(firstNode); // 현재의 tail 다음에 첫 번째 노드를 추가
        tail = firstNode; // tail을 첫 번째 노드로 업데이트
        tail.setNext(null); // 새로운 tail의 next를 null로 설정
    }
}

3.11
자바의 한 차원 배열 A와 B 사이의 얕은 동등성 테스트와 깊은 동등성 테스트의 차이점은 무엇인가요?
배열이 두 차원 배열일 경우는 어떻게 다른가요?
일차원 배열의 경우
얕은 동등성 테스트 : 주로 == 연산자를 사용하여 두 배열의 참조가 동일한지 확인
즉 두 배열이 메모리 상에서 같은 위치를 가리키고 있는지를 검사
깊은 동등성 테스트 : 배열의 내용이 같은지 검사
일차원 int 배열의 경우 Arrays.equals(A,B) 메서드를 사용하여 배열의 각 요소가 순서대로
동일한지 확인할 수 있음. 이 메서드는 배열의 길이와 각 요소의 값이 같을 때 true 반환
이차원 배열의 경우
얕은 동등성 테스트 : 마찬가지로 == 연산자를 사용하여 두 배열 객체의 참조가 동일한지 검사
깊은 동등성 테스트 : 이차원 배열은 배열의 배열로 간주
각 배열의 참조가 아닌 내용의 동등성을 검사하기 위해서는 Arrays.deepEquals(A, B) 메소드 사용
각 차원의 배열을 재귀적으로 비교하여 모든 차원의 배열이 동일한 경우에만 true 반환

c-3.22
describe an algorithm for concatenating two singly linked lists L and M, into a single list L' that contains all the
nodes of L followed by all the nodes of M

c-3.24
describe in detail an algorithm for reversing a singlyLinkedList L using only a constant
amount of additional space
1. 초기화
current 포인터를 리스트의 첫 번쨰 노드에 위치시킴
prev 포인터는 null 초기화
2. 리스트 순회 및 노드 뒤집기
current가 null이 될 때까지 리스트를 순회
각 반복에서 현재 노드의 다음 노드를 가리키는 next 포인터를 저장
현재 노드의 next 포인터를
